{"version":3,"sources":["../src/app.js"],"names":["Promise","global","connect","mongoUrl","connection","on","console","log","err","app","server","Server","io","set","use","req","res","next","apiAppUrl","protocol","get","setHeader","send","static","join","__dirname","contype","headers","includes","status","error","json","limit","urlencoded","extended","parameterLimit","Error","success","message"],"mappings":"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","file":"app.js","sourcesContent":["\r\nimport express from \"express\";\r\nimport http from 'http';\r\nimport path from \"path\";\r\nimport bodyparser from \"body-parser\";\r\nimport cors from \"cors\";\r\nimport expressValidator from \"express-validator\";\r\nimport helmet from \"helmet\";\r\nimport mongoose from \"mongoose\";\r\nimport swaggerSpec from \"./services/swagger\";\r\nimport config from \"./config\";\r\nimport router from \"./routes\";\r\nimport EventHandler from './handlers/index'\r\nimport SocketIO from 'socket.io'\r\nimport autoIncrement from 'mongoose-auto-increment';\r\n\r\nmongoose.Promise = global.Promise;\r\nmongoose.connect(config.mongoUrl);\r\n// mongoose.set('debug', true);\r\n\r\n\r\nmongoose.connection.on('connected', () => {\r\n    console.log('\\x1b[32m%s\\x1b[0m', '[DB] Connected...');\r\n});\r\nmongoose.connection.on('error', err => console.log('\\x1b[31m%s\\x1b[0m', '[DB] Error : ' + err));\r\nmongoose.connection.on('disconnected', () => console.log('\\x1b[31m%s\\x1b[0m', '[DB] DisConnected...'));\r\n\r\n\r\nconst app = express();\r\nconst server = http.Server(app);\r\nconst io = new SocketIO(server);\r\nnew EventHandler(io);\r\napp.set('io', io);\r\n\r\napp.use(cors());\r\napp.use(helmet());\r\n\r\napp.use((req, res, next) => {\r\n    config.apiAppUrl = req.protocol + '://' + req.get('host');\r\n    next();\r\n})\r\n\r\n\r\napp.get('/swagger.json', function (req, res) {\r\n    res.setHeader('Content-Type', 'application/json');\r\n    res.send(swaggerSpec);\r\n});\r\n\r\n\r\napp.use('/docs', express.static(path.join(__dirname, 'docs')));\r\napp.use('/uploads', express.static(path.join(__dirname, 'uploads')));\r\n\r\n\r\n// Ensure Content Type\r\napp.use('/', (req, res, next) => {\r\n    let contype = req.headers['content-type'];\r\n    if (contype && !((contype.includes('application/json') || contype.includes('multipart/form-data'))))\r\n        return res.status(415).send({ error: \"Unsupported Media Type (\" + contype + \")\" });\r\n    next();\r\n});\r\n\r\napp.use(bodyparser.json({ limit: '50mb' }));\r\napp.use(bodyparser.urlencoded({ limit: '50mb', extended: true, parameterLimit: 50000 }));\r\n\r\napp.use(expressValidator());\r\n//Routes\r\napp.use('/api/v1', router);\r\n\r\n\r\n//Not Found Handler\r\napp.use((req, res, next) => {\r\n    const error = new Error(\"Not Found..!\");\r\n    error.status = 404\r\n    next(error);\r\n});\r\n\r\n\r\n//ERROR Handler\r\napp.use((err, req, res, next) => {\r\n    // if (err instanceof mongoose.CastError) {\r\n    // err.status = 404;\r\n    // err.message = `${err.model.modelName} Not Found`;\r\n    // }\r\n\r\n    const status = err.status ? err.status : 500;\r\n    res.status(status).json({\r\n        success: false,\r\n        error: err.message\r\n    });\r\n    console.log(err);\r\n});\r\n\r\n\r\n\r\nexport default server;\r\n\r\n"]}