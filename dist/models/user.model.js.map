{"version":3,"sources":["../../src/models/user.model.js"],"names":["UserSchema","name","type","String","trim","required","email","lowercase","unique","validate","validator","test","message","enum","default","password","phone","country","Number","ref","img","pushTokens","pre","next","account","isModified","salt","genSaltSync","hash","then","catch","console","log","err","methods","isValidPassword","newPassword","callback","user","compare","isMatch","set","transform","doc","ret","options","id","_id","__v","initialize","connection","plugin","model","startAt"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,aAAa,qBAAW;AAC1BC,UAAM;AACFC,cAAMC,MADJ;AAEFC,cAAM,IAFJ;AAGFC,kBAAU;AAHR,KADoB;AAM1BC,WAAO;AACHJ,cAAMC,MADH;AAEHI,mBAAW,IAFR;AAGHH,cAAM,IAHH;AAIHI,gBAAQ,CAAC,IAAD,EAAO,kBAAP,CAJL;AAKHC,kBAAU;AACNC,uBAAW,mBAACJ,KAAD;AAAA,uBAAW,iDAAgDK,IAAhD,CAAqDL,KAArD;AAAX;AAAA,aADL;AAENM,qBAAS;AAFH,SALP;AASHP,kBAAU;AATP,KANmB;AAiB1BH,UAAM;AACFA,cAAMC,MADJ;AAEFU,cAAM,CAAC,OAAD,EAAU,QAAV,CAFJ;AAGFC,iBAAS;AAHP,KAjBoB;AAsB1BC,cAAU;AACNb,cAAMC,MADA;AAENE,kBAAU;AAFJ,KAtBgB;AA0B1BW,WAAO;AACHd,cAAMC,MADH;AAEHE,kBAAU,IAFP;AAGHG,gBAAQ,CAAC,IAAD,EAAO,kBAAP;AAHL,KA1BmB;AA+B1BS,aAAS,EAAE;AACPf,cAAMgB,MADD;AAELC,aAAK;AAFA,KA/BiB;AAmC1BC,SAAK,EAAE;AACHlB,cAAMC;AADL,KAnCqB;AAsC1BkB,gBAAY,CAAC;AACTnB,cAAMC;AADG,KAAD;;AAtCc,CAAX,CAAnB;;AA4CAH,WAAWsB,GAAX,CAAe,MAAf,EAAuB,UAAUC,IAAV,EAAgB;AACnC,QAAMC,UAAU,IAAhB;AACA,QAAI,CAACA,QAAQC,UAAR,CAAmB,UAAnB,CAAL,EAAqC,OAAOF,MAAP;;AAErC,QAAMG,OAAO,mBAAOC,WAAP,EAAb;AACA,uBAAOC,IAAP,CAAYJ,QAAQT,QAApB,EAA8BW,IAA9B,EAAoCG,IAApC,CAAyC,gBAAQ;AAC7CL,gBAAQT,QAAR,GAAmBa,IAAnB;AACAL;AACH,KAHD,EAGGO,KAHH,CAGS;AAAA,eAAOC,QAAQC,GAAR,CAAYC,GAAZ,CAAP;AAAA,KAHT;AAIH,CATD;;AAWAjC,WAAWkC,OAAX,CAAmBC,eAAnB,GAAqC,UAAUC,WAAV,EAAuBC,QAAvB,EAAiC;AAClE,QAAIC,OAAO,IAAX;AACA,uBAAOC,OAAP,CAAeH,WAAf,EAA4BE,KAAKvB,QAAjC,EAA2C,UAAUkB,GAAV,EAAeO,OAAf,EAAwB;AAC/D,YAAIP,GAAJ,EACI,OAAOI,SAASJ,GAAT,CAAP;AACJI,iBAAS,IAAT,EAAeG,OAAf;AACH,KAJD;AAKH,CAPD;;AAUAxC,WAAWyC,GAAX,CAAe,QAAf,EAAyB;AACrBC,eAAW,mBAAUC,GAAV,EAAeC,GAAf,EAAoBC,OAApB,EAA6B;AACpCD,YAAIE,EAAJ,GAASF,IAAIG,GAAb;;AAEA,eAAOH,IAAI7B,QAAX;AACA,eAAO6B,IAAIvB,UAAX;AACA,eAAOuB,IAAI1C,IAAX;AACA,eAAO0C,IAAIG,GAAX;AACA,eAAOH,IAAII,GAAX;AACH;AAToB,CAAzB;;AAYA,gCAAcC,UAAd,CAAyB,mBAASC,UAAlC;AACAlD,WAAWmD,MAAX,CAAkB,gCAAcA,MAAhC,EAAwC;AACpCC,WAAO,MAD6B;AAEpCC,aAAS;AAF2B,CAAxC;;kBAKe,mBAASD,KAAT,CAAe,MAAf,EAAuBpD,UAAvB,C","file":"user.model.js","sourcesContent":["import mongoose, { Schema } from \"mongoose\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport country from './country.model';\r\nimport autoIncrement from 'mongoose-auto-increment';\r\n\r\nconst UserSchema = new Schema({\r\n    name: {\r\n        type: String,\r\n        trim: true,\r\n        required: true\r\n    },\r\n    email: {\r\n        type: String,\r\n        lowercase: true,\r\n        trim: true,\r\n        unique: [true, \"Duplicated Email\"],\r\n        validate: {\r\n            validator: (email) => /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(email),\r\n            message: 'Invalid Email Syntax'\r\n        },\r\n        required: true\r\n    },\r\n    type: {\r\n        type: String,\r\n        enum: [\"ADMIN\", \"NORMAL\"],\r\n        default: \"NORMAL\"\r\n    },\r\n    password: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    phone: {\r\n        type: String,\r\n        required: true,\r\n        unique: [true, \"Duplicated Phone\"]\r\n    },\r\n    country: { // Make sure to create the country model first\r\n        type: Number,\r\n        ref: 'country',\r\n    },\r\n    img: { // url \r\n        type: String\r\n    },\r\n    pushTokens: [{\r\n        type: String\r\n    }]\r\n\r\n});\r\n\r\nUserSchema.pre(\"save\", function (next) {\r\n    const account = this;\r\n    if (!account.isModified('password')) return next();\r\n\r\n    const salt = bcrypt.genSaltSync();\r\n    bcrypt.hash(account.password, salt).then(hash => {\r\n        account.password = hash;\r\n        next();\r\n    }).catch(err => console.log(err));\r\n});\r\n\r\nUserSchema.methods.isValidPassword = function (newPassword, callback) {\r\n    let user = this;\r\n    bcrypt.compare(newPassword, user.password, function (err, isMatch) {\r\n        if (err)\r\n            return callback(err);\r\n        callback(null, isMatch);\r\n    })\r\n};\r\n\r\n\r\nUserSchema.set('toJSON', {\r\n    transform: function (doc, ret, options) {\r\n        ret.id = ret._id;\r\n\r\n        delete ret.password;\r\n        delete ret.pushTokens;\r\n        delete ret.type;\r\n        delete ret._id;\r\n        delete ret.__v;\r\n    }\r\n});\r\n\r\nautoIncrement.initialize(mongoose.connection);\r\nUserSchema.plugin(autoIncrement.plugin, {\r\n    model: 'user',\r\n    startAt: 1,\r\n});\r\n\r\nexport default mongoose.model(\"user\", UserSchema);"]}