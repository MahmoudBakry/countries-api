{"version":3,"sources":["../../src/controllers/country.controller.js"],"names":["validateBody","isUpdate","exists","withMessage","custom","value","req","nameCountry","name","user","userQuery","_id","$ne","findOne","country","Error","createCountry","res","next","validationErrors","array","length","create","body","newCountry","status","json","allCountries","find","select","countries","validateHeader","Types","ObjectId","isValid","findById","countryDetails","updateCountry","type","countryId","params","id","countryInfo","update","$set","newCountryInfo","countryInformaton","deleteCountry"],"mappings":"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","file":"country.controller.js","sourcesContent":["import Country from \"../models/country.model\";\r\nimport ApiError from \"../helpers/ApiError\";\r\nimport config from \"../config\";\r\nimport { body, param, validationResult } from 'express-validator/check';\r\nimport countryModel from \"../models/country.model\";\r\nimport mongoose, { Schema } from \"mongoose\";\r\n\r\nexport default {\r\n    //validation to country model \r\n    validateBody(isUpdate = false) {\r\n        return [\r\n            body(\"name\").exists().withMessage(\"name is required\")\r\n                //check in unquiness of country name\r\n                .custom(async (value, { req }) => {\r\n                    let nameCountry = { name: value };\r\n                    if (isUpdate && req.user.name === value)\r\n                        userQuery._id = { $ne: req.user._id };\r\n\r\n                    let country = await Country.findOne(nameCountry);\r\n                    if (country)\r\n                        throw new Error('country name already exists');\r\n                    else\r\n                        return true;\r\n                })\r\n        ];\r\n    },\r\n    //create new country logic \r\n    async createCountry(req, res, next) {\r\n        const validationErrors = validationResult(req).array();\r\n        if (validationErrors.length > 0)\r\n            return next(new ApiError(422, validationErrors));\r\n        try {\r\n            let newCountry = await countryModel.create(req.body);\r\n            return res.status(201).json(newCountry)\r\n        } catch (err) {\r\n            next(err)\r\n        }\r\n    },\r\n    //retirive all countries logic \r\n    async allCountries(req, res, next) {\r\n        let countries = await Country.find().select('id name creationDate');\r\n        if (countries.length > 0) {\r\n            return res.status(200).json(countries)\r\n        }\r\n\r\n        return res.status(204)\r\n    },\r\n    //validation for updating country\r\n    validateHeader(isUpdate = true) {\r\n        return [\r\n            param(\"id\").exists().withMessage(\"counrey Id required\")\r\n                .custom(async (value, { req }) => {\r\n                    if (!mongoose.Types.ObjectId.isValid(value)) {\r\n                        throw new Error('invalid country Id');\r\n                    } else { return true }\r\n                    let countryDetails = await Country.findById(value);\r\n                    if (!countryDetails) {\r\n                        throw new Error('no country with this id');\r\n                    } else { return true }\r\n                }),\r\n            body(\"name\")\r\n                //check in unquiness of country name\r\n                .custom(async (value, { req }) => {\r\n                    let nameCountry = { name: value };\r\n                    let country = await Country.findOne(nameCountry)\r\n                    //console.log(country.length);\r\n                    if (country) {\r\n                        throw new Error('country name already exists');\r\n                    } else\r\n                        return true;\r\n                })\r\n        ]\r\n    },\r\n    //update country logic\r\n    async updateCountry(req, res, next) {\r\n        if (req.user.type == \"ADMIN\") {\r\n            const validationErrors = validationResult(req).array();\r\n            if (validationErrors.length > 0)\r\n                return next(new ApiError(422, validationErrors));\r\n\r\n            try {\r\n                let countryId = req.params.id;\r\n                let countryInfo = await Country.findById(countryId);\r\n\r\n                //updating countryInfo\r\n                await Country.update({ _id: countryId }, {\r\n                    $set: {\r\n                        name: req.body.name || countryInfo.name,\r\n                    }\r\n                })\r\n                //return country after updating\r\n                let newCountryInfo = await Country.findById(countryId);\r\n                return res.status(200).json({\r\n                    newCountry: newCountryInfo\r\n                })\r\n            } catch (err) {\r\n                next(err)\r\n            }\r\n        } else\r\n            return next(new ApiError(403, \"must to be Admin user\"));\r\n\r\n    },\r\n\r\n    //retrive one country \r\n    async countryInformaton(req, res, next) {\r\n        const id = req.params.id;\r\n        if (!mongoose.Types.ObjectId.isValid(id)) {\r\n            return next(new ApiError(422, \"invlaid country id\"));\r\n        }\r\n        let countryInfo = await Country.findById(id);\r\n        if (countryInfo)\r\n            return res.status(200).json({ country: countryInfo })\r\n        else\r\n            return res.status(204)\r\n    },\r\n    //delete on country\r\n    async deleteCountry(req, res, next) {\r\n        return res.status(200).json({ \"msg\": \"it works later\" });\r\n    },\r\n\r\n\r\n}"]}