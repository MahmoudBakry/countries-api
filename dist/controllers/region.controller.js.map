{"version":3,"sources":["../../src/controllers/region.controller.js"],"names":["validateBody","isUpdate","exists","withMessage","custom","value","req","nameRegion","name","user","userQuery","_id","$ne","findOne","where","equals","params","cityId","region","Error","createRegion","res","next","type","validationErrors","array","length","newRegion","body","city","create","createdRegion","findById","populate","path","model","response","status","json","allRegions","id","find","regions","regionInformaton","regionId","regionInfo","validateHeader","Types","ObjectId","isValid","regionDetails","updateRegion","update","$set","newRegionInfo"],"mappings":"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","file":"region.controller.js","sourcesContent":["import City from \"../models/city.model\";\r\nimport Region from \"../models/region.model\";\r\nimport ApiError from \"../helpers/ApiError\";\r\nimport { body, param, validationResult } from 'express-validator/check';\r\nimport mongoose, { Schema } from \"mongoose\";\r\n\r\n\r\nexport default {\r\n\r\n    validateBody(isUpdate = false) {\r\n        return [\r\n            body(\"name\").exists().withMessage(\"name is required\")\r\n                //check in unquiness of country name\r\n                .custom(async (value, { req }) => {\r\n                    let nameRegion = { name: value };\r\n                    if (isUpdate && req.user.name === value)\r\n                        userQuery._id = { $ne: req.user._id };\r\n\r\n                    let region = await Region.findOne(nameRegion).\r\n                        where('city').equals(req.params.cityId)\r\n                    if (region)\r\n                        throw new Error('region name already exists');\r\n                    else\r\n                        return true;\r\n                })\r\n        ];\r\n    },\r\n    //creatre new region logic\r\n    async createRegion(req, res, next) {\r\n        if (req.user.type == \"ADMIN\") {\r\n            const validationErrors = validationResult(req).array();\r\n            if (validationErrors.length > 0)\r\n                return next(new ApiError(422, validationErrors));\r\n            try {\r\n                let newRegion = {\r\n                    name: req.body.name,\r\n                    city: req.params.cityId\r\n                }\r\n                let createdRegion = await Region.create(newRegion);\r\n                let response = await Region.findById(createdRegion)\r\n                    .populate({\r\n                        path: 'city',\r\n                        populate: {\r\n                            path: 'country',\r\n                            model: 'country'\r\n                        }\r\n                    })\r\n                return res.status(201).json(response)\r\n            } catch (err) {\r\n                next(err)\r\n            }\r\n        }\r\n\r\n    },\r\n\r\n    //all cities logic \r\n    async allRegions(req, res, next) {\r\n        let id = req.params.cityId\r\n        let regions = await Region.find({ city: id }).populate({\r\n            path: 'city',\r\n            populate: {\r\n                path: 'country',\r\n                model: 'country'\r\n            }\r\n        })\r\n        return res.status(200).json(regions)\r\n    },\r\n    //one region details \r\n    async regionInformaton(req, res, next) {\r\n        const id = req.params.regionId;\r\n        let regionInfo = await Region.findById(id).populate({\r\n            path: 'city',\r\n            populate: {\r\n                path: 'country',\r\n                model: 'country'\r\n            }\r\n        })\r\n        if (regionInfo)\r\n            return res.status(200).json(regionInfo)\r\n        else\r\n            return res.status(404)\r\n    },\r\n    //validation for updating region\r\n    validateHeader(isUpdate = true) {\r\n        return [\r\n            param(\"regionId\").exists().withMessage(\"region Id required\")\r\n                .custom(async (value, { req }) => {\r\n                    if (!mongoose.Types.ObjectId.isValid(value)) {\r\n                        throw new Error('invalid region Id');\r\n                    } else { return true }\r\n                    let regionDetails = await Region.findById(value);\r\n                    if (!regionDetails) {\r\n                        throw new Error('no region with this id');\r\n                    } else { return true }\r\n                }),\r\n            body(\"name\")\r\n                //check in unquiness of country name\r\n                .custom(async (value, { req }) => {\r\n                    let nameRegion = { name: value };\r\n                    let region = await Region.findOne(nameRegion)\r\n                        .where('city').equals(req.params.cityId)\r\n                    if (region) {\r\n                        throw new Error('region name already exists');\r\n                    } else\r\n                        return true;\r\n                })\r\n        ]\r\n    },\r\n\r\n    //update city logic\r\n    async updateRegion(req, res, next) {\r\n        if (req.user.type == \"ADMIN\") {\r\n            const validationErrors = validationResult(req).array();\r\n            if (validationErrors.length > 0)\r\n                return next(new ApiError(422, validationErrors));\r\n\r\n            try {\r\n                let regionId = req.params.regionId;\r\n                let regionInfo = await Region.findById(regionId);\r\n\r\n                //updating countryInfo\r\n                await Region.update({ _id: regionId }, {\r\n                    $set: {\r\n                        name: req.body.name || regionInfo.name,\r\n                        city: req.body.city || regionInfo.city\r\n                    }\r\n                })\r\n                //return country after updating\r\n                let newRegionInfo = await Region.findById(regionId)\r\n                    .populate('city', 'name id');\r\n                return res.status(200).json({\r\n                    region: newRegionInfo\r\n                })\r\n            } catch (err) {\r\n                next(err)\r\n            }\r\n        } else\r\n            return next(new ApiError(403, \"must to be Admin user\"));\r\n\r\n    },\r\n\r\n\r\n\r\n}\r\n"]}