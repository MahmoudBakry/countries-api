{"version":3,"sources":["../../src/controllers/user.controller.js"],"names":["jwtSecret","generateToken","sign","sub","id","iss","iat","Date","getTime","expiresIn","checkPhone","phoneno","inputtxt","match","Error","validateEmail","re","test","email","validateBody","isUpdate","exists","withMessage","isEmail","custom","value","req","findOne","user","phone","signup","res","next","validationErrors","array","length","file","body","img","create","createdUser","findById","populate","newUser","status","send","userDetails","token","signin","checkEmail","json","unique","validateUpdate","userQuery","_id","$ne","userPhoneQuery","updateProfile","params","userId","ourUser","findByIdAndUpdate","new","newObje","populatedUser"],"mappings":"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","file":"user.controller.js","sourcesContent":["import User from \"../models/user.model\";\r\nimport ApiError from \"../helpers/ApiError\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport config from \"../config\";\r\nimport { toImgUrl } from '../utils';\r\nimport { body, validationResult } from 'express-validator/check';\r\nimport mongoose, { Schema } from \"mongoose\";\r\nimport ApiResponse from '../helpers/ApiResponse';\r\nimport { escapeRegExp } from 'lodash';\r\nimport moment from 'moment'\r\n\r\n\r\n\r\nconst { jwtSecret } = config;\r\nconst generateToken = id => {\r\n\r\n    return jwt.sign({\r\n        sub: id,\r\n        iss: 'App',\r\n        iat: new Date().getTime(),\r\n    }, jwtSecret, { expiresIn: '10000s' })\r\n}\r\n\r\n\r\n//function check phone regular exression \r\n//this function support \r\n// +XX-XXXX-XXXX  \r\n// +XX.XXXX.XXXX  \r\n// +XX XXXX XXXX \r\nconst checkPhone = inputtxt => {\r\n    var phoneno = /^[\\+]?[(]?[0-9]{3}[)]?[-\\s\\.]?[0-9]{3}[-\\s\\.]?[0-9]{4,6}$/;\r\n    if (inputtxt.match(phoneno)) {\r\n        return true;\r\n    }\r\n    else {\r\n        throw new Error(\"invalid phone\")\r\n    }\r\n}\r\n\r\nconst validateEmail = email => {\r\n    var re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    if (re.test(email)) {\r\n        return true\r\n    } else {\r\n        throw new Error(\"invalid email\")\r\n    }\r\n}\r\n\r\nexport default {\r\n    //validation on request parameter during sinup route\r\n    validateBody(isUpdate = false) {\r\n        return [\r\n            body(\"email\").exists().withMessage(\"Email is required\")\r\n                .isEmail().withMessage(\"Email is invalid syntax\")\r\n                .custom(async (value, { req }) => {\r\n                    let user = await User.findOne({ email: value });\r\n                    if (!user)\r\n                        return true\r\n                }).withMessage('email exist before'),\r\n            body(\"name\").exists().withMessage(\"name is required\"),\r\n            body(\"password\").exists().withMessage(\"password is required\"),\r\n            body(\"phone\").exists().withMessage(\"phone is requires\")\r\n                .custom(async (value, { req }) => {\r\n                    let user = await User.findOne({ phone: value });\r\n                    if (!user)\r\n                        return true\r\n                }).withMessage('phone exist before'),\r\n        ];\r\n    },\r\n\r\n    async signup(req, res, next) {\r\n        const validationErrors = validationResult(req).array();\r\n        if (validationErrors.length > 0)\r\n            return next(new ApiError(422, validationErrors));\r\n        try {\r\n            if (req.file)\r\n                req.body.img = await toImgUrl(req.file);\r\n            let createdUser = await User.create(req.body);\r\n            let newUser = await User.findById(createdUser.id)\r\n                .populate('country')\r\n            res.status(201).send({ userDetails: newUser, token: generateToken(createdUser.id) });\r\n        } catch (err) {\r\n            next(err);\r\n        }\r\n    },\r\n    //signin logic function \r\n    async signin(req, res, next) {\r\n        let user = req.user; // Passport\r\n        let userDetails = await User.findById(user.id)\r\n            .populate('country notificationPlan userPlan')\r\n        res.send({ userDetails, token: generateToken(user.id) });\r\n    },\r\n    //check email is exist or not \r\n    async checkEmail(req, res, next) {\r\n        if (!req.body.email)\r\n            return next(new ApiError(422, 'email is required'))\r\n        let email = req.body.email;\r\n        try {\r\n            validateEmail(email);\r\n            let user = await User.findOne({ email: email });\r\n            if (user)\r\n                return res.status(200).json({ unique: false })\r\n            else\r\n                return res.status(200).json({ unique: true })\r\n\r\n        } catch (err) {\r\n            next(err)\r\n        }\r\n    },\r\n    //check if phone is valid or not\r\n    async checkPhone(req, res, next) {\r\n        if (!req.body.phone)\r\n            return next(new ApiError(422, 'phone is required'));\r\n        let phone = req.body.phone;\r\n        try {\r\n            checkPhone(phone)\r\n            let user = await User.findOne({ phone: phone });\r\n            if (!user)\r\n                return res.status(200).json({ unique: true })\r\n            else\r\n                return res.status(200).json({ unique: false })\r\n        } catch (err) {\r\n            next(err)\r\n        }\r\n    },\r\n\r\n\r\n    //validation on request parameter during sinup route\r\n    validateUpdate(isUpdate = true) {\r\n        return [\r\n            body(\"email\").isEmail().withMessage(\"Email is invalid syntax\")\r\n                .custom(async (value, { req }) => {\r\n                    let userQuery = { email: value };\r\n                    if (isUpdate && req.user.email === value)\r\n                        userQuery._id = { $ne: req.user._id };\r\n\r\n                    let user = await User.findOne(userQuery);\r\n                    if (user)\r\n                        throw new Error('email already exists');\r\n                    else\r\n                        return true;\r\n                }),\r\n            body(\"phone\")\r\n                //make custome validation to phone to check on phone[unique, isPhone]\r\n                .custom(async (value, { req }) => {\r\n                    //call phone checking pattren function \r\n                    checkPhone(value);\r\n                    if (isUpdate && req.user.phone == value)\r\n                        userQuery._id = { $ne: req.user._id };\r\n                    let userPhoneQuery = { phone: value };\r\n                    let user = await User.findOne(userPhoneQuery);\r\n                    if (user)\r\n                        throw new Error('phone already exists');\r\n                    else\r\n                        return true\r\n                })\r\n        ];\r\n    },\r\n    //update profile of user \r\n    async updateProfile(req, res, next) {\r\n        const id = req.params.userId;\r\n        let ourUser = await User.findById(id)\r\n        if (req.file) {\r\n            req.body.img = await toImgUrl(req.file);\r\n        } else {\r\n            req.body.img = ourUser.img\r\n        }\r\n        if (!(req.user.id == ourUser.id)) {\r\n            return next(new ApiError(422, \"don't have access to resourse\"));\r\n        }\r\n        try {\r\n            if (req.body.phone) {\r\n                checkPhone(req.body.phone)\r\n            }\r\n\r\n            if (req.body.email) {\r\n                validateEmail(req.body.email)\r\n            }\r\n\r\n            let newObje = await User.findByIdAndUpdate(id, req.body, { new: true });\r\n            let populatedUser = await User.findById(newObje.id)\r\n                .populate('country')\r\n                .populate('userPlan')\r\n                .populate('notificationPlan')\r\n            return res.status(200).send(populatedUser);\r\n        } catch (err) {\r\n            next(err)\r\n        }\r\n\r\n    },\r\n}\r\n"]}