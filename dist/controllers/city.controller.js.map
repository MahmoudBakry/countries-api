{"version":3,"sources":["../../src/controllers/city.controller.js"],"names":["validateBody","isUpdate","exists","withMessage","custom","value","req","nameCity","name","user","userQuery","_id","$ne","findOne","where","equals","params","countryId","city","Error","createCity","res","next","type","validationErrors","array","length","file","body","img","newCity","country","create","createdCity","findById","id","populate","response","status","json","allCities","find","cities","cityInformaton","cityId","cityInfo","end","validateHeader","cityDetails","console","log","updateCity","update","$set","newCityInfo","deleteCity"],"mappings":"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","file":"city.controller.js","sourcesContent":["import Country from \"../models/country.model\";\r\nimport City from \"../models/city.model\";\r\nimport ApiError from \"../helpers/ApiError\";\r\nimport { body, param, validationResult } from 'express-validator/check';\r\nimport mongoose, { Schema } from \"mongoose\";\r\nimport { toImgUrl } from '../utils';\r\nexport default {\r\n    validateBody(isUpdate = false) {\r\n        return [\r\n            body(\"name\").exists().withMessage(\"name is required\")\r\n                //check in unquiness of country name\r\n                .custom(async (value, { req }) => {\r\n                    let nameCity = { name: value };\r\n                    if (isUpdate && req.user.name === value)\r\n                        userQuery._id = { $ne: req.user._id };\r\n\r\n                    let city = await City.findOne(nameCity).\r\n                        where('country').equals(req.params.countryId)\r\n                    if (city)\r\n                        throw new Error('city name already exists');\r\n                    else\r\n                        return true;\r\n                })\r\n        ];\r\n    },\r\n    //creatre new city logic\r\n    async createCity(req, res, next) {\r\n        if (req.user.type == \"ADMIN\") {\r\n            const validationErrors = validationResult(req).array();\r\n            if (validationErrors.length > 0)\r\n                return next(new ApiError(422, validationErrors));\r\n            try {\r\n                if (req.file) {\r\n                    req.body.img = await toImgUrl(req.file);\r\n                }\r\n                let newCity = {\r\n                    name: req.body.name,\r\n                    country: req.params.countryId,\r\n                    img: req.body.img\r\n                }\r\n                let createdCity = await City.create(newCity);\r\n                let response = await City.findById(createdCity.id).populate('country')\r\n                return res.status(201).json(response)\r\n            } catch (err) {\r\n                next(err)\r\n            }\r\n        }\r\n        return next(new ApiError(403, \"must to be Admin user\"));\r\n\r\n    },\r\n    //all cities logic \r\n    async allCities(req, res, next) {\r\n        if (!req.params.countryId) {\r\n            next(new ApiError(422, \"missed country id\"))\r\n        }\r\n        const countryId = req.params.countryId\r\n        let country = await Country.findById(countryId)\r\n        if (!country)\r\n            return res.status(404);\r\n\r\n        let cities = await City.find({ country: req.params.countryId }).populate('country')\r\n        return res.status(200).json(cities)\r\n    },\r\n    //one city details \r\n    async cityInformaton(req, res, next) {\r\n        const id = req.params.cityId;\r\n\r\n        let cityInfo = await City.findById(id).populate('country', 'name id')\r\n        if (cityInfo)\r\n            return res.status(200).json({ city: cityInfo })\r\n        else\r\n            return res.status(404).end();\r\n    },\r\n    //validation for updating city\r\n    validateHeader(isUpdate = true) {\r\n        return [\r\n            param(\"cityId\").exists().withMessage(\"city Id required\")\r\n                .custom(async (value, { req }) => {\r\n                    let cityDetails = await City.findById(value);\r\n                    if (!cityDetails) {\r\n                        throw new Error('no country with this id');\r\n                    } else { return true }\r\n                }),\r\n            body(\"name\")\r\n                //check in unquiness of country name\r\n                .custom(async (value, { req }) => {\r\n                    let nameCity = { name: value };\r\n                    let city = await City.findOne(nameCity)\r\n                        .where('country').equals(req.params.countryId)\r\n\r\n                    console.log(city);\r\n                    if (city) {\r\n                        throw new Error('city name already exists');\r\n                    } else\r\n                        return true;\r\n                })\r\n        ]\r\n    },\r\n    //update city logic\r\n    async updateCity(req, res, next) {\r\n        if (req.user.type == \"ADMIN\") {\r\n            const validationErrors = validationResult(req).array();\r\n            if (validationErrors.length > 0)\r\n                return next(new ApiError(422, validationErrors));\r\n            try {\r\n                if (req.file) {\r\n                    req.body.img = await toImgUrl(req.file);\r\n                }\r\n                let cityId = req.params.cityId;\r\n                let cityInfo = await City.findById(cityId);\r\n                //updating countryInfo\r\n                await City.update({ _id: cityId }, {\r\n                    $set: {\r\n                        name: req.body.name || cityInfo.name,\r\n                        country: req.body.country || cityInfo.country,\r\n                        img: req.body.img || cityInfo.img\r\n                    }\r\n                })\r\n                //return country after updating\r\n                let newCityInfo = await City.findById(cityId);\r\n                return res.status(200).json(newCityInfo)\r\n            } catch (err) {\r\n                next(err)\r\n            }\r\n        } else\r\n            return next(new ApiError(403, \"must to be Admin user\"));\r\n    },\r\n    //delete on country\r\n    async deleteCity(req, res, next) {\r\n        return res.status(200).json({ \"msg\": \"it works later\" });\r\n    },\r\n\r\n\r\n}"]}