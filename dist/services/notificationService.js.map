{"version":3,"sources":["../../src/services/notificationService.js"],"names":["message","io","targetUserId","issuer","id","ads","owner","serviceUser","create","targetUser","subjectOfNotificationTypes","subjectOfNotification","type","chatNotifi","findById","populate","path","model","console","log","of","to","emit","sendRealStateChatNotificToOtherOne","question","followersIds","x","length","answerNotification","answerNotificationDetails","sendAnswerNotificToFollowersOfQuestion"],"mappings":";;;;;;;;uEAGO,iBAAkDA,OAAlD,EAA2DC,EAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEKC,oCAFL,GAEoBF,QAAQG,MAAR,CAAeC,EAAf,IAAqBJ,QAAQK,GAAR,CAAYC,KAAjC,GAAyCN,QAAQK,GAAR,CAAYC,KAArD,GAA6DN,QAAQO,WAFzF;AAAA;AAAA,+BAGwB,uBAAkBC,MAAlB,CAAyB;AAC5CL,oCAAQH,QAAQG,MAD4B;AAE5CI,yCAAaP,QAAQO,WAFuB;AAG5CE,wCAAYP,YAHgC;AAI5CQ,wDAA4B,yBAJgB;AAK5CC,mDAAuBX,QAAQI,EALa;AAM5CQ,kCAAM;AANsC,yBAAzB,CAHxB;;AAAA;AAGKC,kCAHL;AAAA;AAAA,+BAYoB,uBAAkBC,QAAlB,CAA2BD,WAAWT,EAAtC,EACdW,QADc,CACL,QADK,EAEdA,QAFc,CAEL;AACNC,kCAAM,uBADA;AAEND,sCAAU;AACNC,sCAAM,KADA;AAENC,uCAAO;AAFD;AAFJ,yBAFK,CAZpB;;AAAA;AAYCJ,kCAZD;;AAqBCK,gCAAQC,GAAR,CAAYN,UAAZ;;AAEA;AACAZ,2BAAGmB,EAAH,mBAAwBC,EAAxB,CAA2BnB,YAA3B,EAAyCoB,IAAzC,CAA8C,iBAA9C,EAAiET,UAAjE;;AAEA;AACA,qDAAKX,YAAL,EAAmB,kBAAnB,EAAuCW,WAAWH,0BAAlD,EAA8EG,WAAWF,qBAAzF;;AAEA;AA7BD;AAAA;;AAAA;AAAA;AAAA;;AA+BCO,gCAAQC,GAAR,CAAY,uBAAZ;;AA/BD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeI,kC;;;;AAkCtB;;;;wEACO,kBAAsDC,QAAtD,EAAgEvB,EAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEKwB,oCAFL,GAEoBD,SAASC,YAF7B;AAGUC,yBAHV,GAGc,CAHd;;AAAA;AAAA,8BAGiBA,IAAID,aAAaE,MAHlC;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAKoC,uBAAkBnB,MAAlB,CAAyB;AACpDC,wCAAYgB,aAAaC,CAAb,CADwC;AAEpDhB,wDAA4B,UAFwB;AAGpDC,mDAAuBa,SAASpB,EAHoB;AAIpDQ,kCAAM;AAJ8C,yBAAzB,CALpC;;AAAA;AAKSgB,0CALT;AAAA;AAAA,+BAW2C,uBAAkBd,QAAlB,CAA2Bc,mBAAmBxB,EAA9C,EACjCW,QADiC,CACxB,YADwB,EAEjCA,QAFiC,CAExB,uBAFwB,CAX3C;;AAAA;AAWSc,iDAXT;;AAcK;AACA5B,2BAAGmB,EAAH,mBAAwBC,EAAxB,CAA2BI,aAAaC,CAAb,CAA3B,EAA4CJ,IAA5C,CAAiD,iBAAjD,EAAoEO,yBAApE;AACA;AACA,qDAAKJ,aAAaC,CAAb,CAAL,EAAsB,6BAAtB,EAAqDG,yBAArD;;AAjBL;AAG0CH,2BAH1C;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAoBCR,gCAAQC,GAAR,CAAY,uBAAZ;;AApBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeW,sC;;;;;AAtCtB;;;;AACA","file":"notificationService.js","sourcesContent":["import NotificationModel from '../models/notification.model';\r\nimport { send } from '../services/push-notifications'\r\n\r\nexport async function sendRealStateChatNotificToOtherOne(message, io) {\r\n    try {\r\n        let targetUserId = message.issuer.id != message.ads.owner ? message.ads.owner : message.serviceUser;\r\n        let chatNotifi = await NotificationModel.create({\r\n            issuer: message.issuer,\r\n            serviceUser: message.serviceUser,\r\n            targetUser: targetUserId,\r\n            subjectOfNotificationTypes: 'user-realEstate-message',\r\n            subjectOfNotification: message.id,\r\n            type: 'CHAT'\r\n        });\r\n\r\n        chatNotifi = await NotificationModel.findById(chatNotifi.id)\r\n            .populate('issuer')\r\n            .populate({\r\n                path: 'subjectOfNotification',\r\n                populate: {\r\n                    path: 'ads',\r\n                    model: 'ads-base-model'\r\n                }\r\n            })\r\n        console.log(chatNotifi)\r\n\r\n        //in app notification\r\n        io.of(`/notifications`).to(targetUserId).emit(\"newNotification\", chatNotifi);\r\n\r\n        //send push notification \r\n        send(targetUserId, 'لديك رساله جديده', chatNotifi.subjectOfNotificationTypes, chatNotifi.subjectOfNotification)\r\n\r\n        //  console.log(\"Chat-ads-Notification-Namespace => \", nsp.name);\r\n    } catch (err) {\r\n        console.log('ads Chat Notifi Err: ', err);\r\n    }\r\n}\r\n//send notification to all followers of specific question \r\nexport async function sendAnswerNotificToFollowersOfQuestion(question, io) {\r\n    try {\r\n        let followersIds = question.followersIds;\r\n        for (let x = 0; x < followersIds.length; x++) {\r\n\r\n            let answerNotification = await NotificationModel.create({\r\n                targetUser: followersIds[x],\r\n                subjectOfNotificationTypes: \"question\",\r\n                subjectOfNotification: question.id,\r\n                type: 'ANSWER'\r\n            })\r\n            let answerNotificationDetails = await NotificationModel.findById(answerNotification.id)\r\n                .populate('targetUser')\r\n                .populate('subjectOfNotification')\r\n            //in app notification\r\n            io.of(`/notifications`).to(followersIds[x]).emit(\"newNotification\", answerNotificationDetails);\r\n            //send push notification \r\n            send(followersIds[x], 'لديك اجابه على سؤال تتابعه ', answerNotificationDetails)\r\n        }\r\n    } catch (err) {\r\n        console.log('ads Chat Notifi Err: ', err);\r\n    }\r\n}\r\n"]}