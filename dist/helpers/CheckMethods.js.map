{"version":3,"sources":["../../src/helpers/CheckMethods.js"],"names":["checkExist","id","Model","extraQuery","errorMessage","validId","findOne","_id","lean","model","modelName","checkExistThenGet","populate","populateQuery","isNumeric","validIds","isArray","ids","every","Number","isInteger","parseInt","value","Array","values","isImgUrl","test","isLat","isLng","isYear","isInternationNo"],"mappings":"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","file":"CheckMethods.js","sourcesContent":["import ApiError from './ApiError';\r\n\r\n// const CapitalizeFirstChar = (name) => name.charAt(0).toUpperCase() + name.slice(1);\r\n\r\nexport const checkExist = async (id, Model, extraQuery = {}, errorMessage = '') => {\r\n    // to be optimized\r\n    if (typeof extraQuery != 'object') {\r\n        errorMessage = extraQuery;\r\n        extraQuery = {};\r\n    }\r\n\r\n\r\n    if (validId(id)) {\r\n        let model = await Model.findOne({ _id: id, ...extraQuery }).lean();\r\n        if (model)\r\n            return;\r\n    }\r\n\r\n    throw new ApiError(404, errorMessage ? errorMessage : `${Model.modelName} Not Found`);\r\n\r\n};\r\n\r\n\r\nexport const checkExistThenGet = async (id, Model, extraQuery = { populate: '' }, errorMessage = '') => {\r\n    let populateQuery = extraQuery.populate || '';\r\n\r\n    // to be optimized\r\n    if (typeof extraQuery != 'object') {\r\n        errorMessage = extraQuery;\r\n        extraQuery = {};\r\n    } else {\r\n        delete extraQuery.populate;\r\n    }\r\n\r\n    if (validId(id)) {\r\n        let model = await Model.findOne({ _id: id, ...extraQuery }).populate(populateQuery);\r\n        if (model)\r\n            return model;\r\n    }\r\n\r\n    throw new ApiError(404, errorMessage ? errorMessage : `${Model.modelName} Not Found`);\r\n};\r\n\r\n\r\nexport const validId = id => isNumeric(id);\r\nexport const validIds = ids => isArray(ids) && ids.every(id => validId(id));\r\nexport const isNumeric = value => Number.isInteger(parseInt(value));\r\nexport const isArray = values => Array.isArray(values);\r\nexport const isImgUrl = value => /\\.(jpeg|jpg|png)$/.test(value);\r\nexport const isLat = value => /^\\(?[+-]?(90(\\.0+)?|[1-8]?\\d(\\.\\d+)?)$/.test(value);\r\nexport const isLng = value => /^\\s?[+-]?(180(\\.0+)?|1[0-7]\\d(\\.\\d+)?|\\d{1,2}(\\.\\d+)?)\\)?$/.test(value);\r\nexport const isYear = value => /^\\d{4}$/.test(value);\r\nexport const isInternationNo = value => /^[\\+]?[(]?[0-9]{3}[)]?[-\\s\\.]?[0-9]{3}[-\\s\\.]?[0-9]{4,6}$/.test(value);\r\n"]}